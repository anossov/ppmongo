#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Pretty-prints data from mongo
Usage:
  barnget COLLECTION [JSON_QUERY|(OPTION|ACTION|KEY=VALUE)*]

Options: occur before key-value pair
    re: value is treated like a regexp
    int: value is treated like a number
    fields: affects all following key-value pairs: field=1 means include field,
            field=0 means exclude field, like in mongo
Actions:
    count: can occur anywhere - print number of objects instead of objects
    analyze: analyze objects, count keys and values
    flat: flat list without pretty-printing. Works only with 'fields'

Examples:
    $ ./barnget posts count
    82804

    $ ./barnget posts count provider=twitter
    10115

    $ ./barnget raw re task_key=vkontakte

    --------------------------------------------------------------------------------
     {
       task_key -> vkontakte:18976004:comments:1031021_2977
       response ->  [ (5)
           4
            {
               date -> 1312477098
               text -> таки как давно ви в мтс работаете?
               uid -> 12630040

      ...


    $ ./barnget posts count provider=twitter author.id=113162301
    12

    $ ./barnget posts count provider=twitter re author.id=^1131
    12


    $ ./barnget posts id=91180877924679680 fields content=1

    --------------------------------------------------------------------------------
     {
       content ->  [ (2)
           ef856bac6ffd207a285c465ab47d22e7
           dbf0dd7f941d9c5152b691552a0e0a00
         ]
       _id -> 4e26fbd9472af974eac9112b
     }


    $ ./barnget posts id=91180877924679680 fields raw=0

    --------------------------------------------------------------------------------
     {
       is_comment -> False
       likes_size -> 0
       comments_size -> 0
       author ->  {
           id -> 19418770
           name -> kukushechkin
         }
       comments -> [ ]
       content ->  [ (2)
           ef856bac6ffd207a285c465ab47d22e7
           dbf0dd7f941d9c5152b691552a0e0a00
         ]
       likes -> [ ]
       provider -> twitter
       created_time -> 2011-07-13 16:23:10
       viewable_by ->  [ (1)
           18976004
         ]
       _id -> 4e26fbd9472af974eac9112b
       id -> 91180877924679680
     }
"""

import sys
import json
import pymongo

from ppmongo.analyze import analyze
from ppmongo import printing as pprint

if __name__ == '__main__':
    db = pymongo.Connection()['rtb']

    collection = db[sys.argv[1]]

    Q = {}
    re = False
    i = False
    fields = False
    js = False
    action = None
    F = None

    if len(sys.argv) > 2:
        Q = {}
        for p in sys.argv[2:]:

            if js:
                js = False
                try:
                    Q.update(json.loads(p))
                except ValueError, e:
                    print e
                    Q = None

                continue

            if '=' in p:
                k, v = p.split('=')

                if re:
                    v = {'$regex': v}
                    re = False
                elif i:
                    v = int(v)
                    i = False
                elif v == 'None':
                    v = None

                if fields:
                    F[k] = int(v)
                else:
                    Q[k] = v
            else:
                if p == 're':
                    re = True
                elif p == 'int':
                    i = True
                elif p in ('count', 'analyze', 'flat'):
                    action = p
                elif p == 'fields':
                    fields = True
                    F = {}
                elif p == 'json':
                    js = True

    cur = collection.find(Q, F)
    if action == 'count':
        print cur.count()
    elif action == 'analyze':
        analyze(list(cur))
    elif action == 'flat':
        if F is None:
            raise Exception('Flat list requires field list')
        key = F.keys()[0].split('.')
        paths = [key.split('.') for key in F.keys()]
        for document in cur:
            vals = []
            for key in paths:
                d = document
                for k in key:
                    d = d.get(k, '')
                    if d == '':
                        break
                vals.append(unicode(d))
            print (u'\t'.join(vals)).encode('utf-8')
    else:
        i = 1
        for document in cur:
            print u'-' * 80, i

            pprint.pprint(document)
            i += 1
